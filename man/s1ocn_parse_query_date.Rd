% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s1ocn_list_files.R
\name{s1ocn_parse_query_date}
\alias{s1ocn_parse_query_date}
\title{Parse and Format Date-Time Strings to ISO 8601}
\usage{
s1ocn_parse_query_date(x, default = lubridate::now(tzone = "UTC"))
}
\arguments{
\item{x}{A character string representing a date-time in one of several possible formats. The supported
formats include:
\itemize{
\item \code{"YYYY-MM-DD HH:MM:SS"} (year, month, day, hour, minute, second)
\item \code{"YYYY-MM-DD HH:MM"} (year, month, day, hour, minute)
\item \code{"YYYY-MM-DD HH"} (year, month, day, hour)
\item \code{"YYYY-MM-DD"} (year, month, day)
If \code{x} is \code{NA}, \code{NULL}, or a special "zap" value, the function will return the \code{default} value.
}}

\item{default}{A date-time object returned if the input \code{x} is \code{NA}, \code{NULL}, a "zap" value,
or if parsing fails. The default value is the current time in UTC when not specified.}
}
\value{
A character string representing the parsed date-time in ISO 8601 format (\code{YYYY-MM-DDTHH:MM:SS.000Z}).
If the parsing fails or the input is not provided, the function returns the specified \code{default} value.
}
\description{
This function attempts to parse a variety of date-time string formats and returns a formatted
string in the ISO 8601 format (\code{YYYY-MM-DDTHH:MM:SS.000Z}). If the input string cannot be
parsed, the function returns a default value.
}
\details{
The function uses a series of parsing attempts to handle various date-time formats. It begins with the
most detailed format (\code{ymd_hms}) and progressively attempts less detailed formats (\code{ymd_hm}, \code{ymd_h}, \code{ymd}).
If all parsing attempts fail, the function returns the \code{default} value.

The output is formatted to the ISO 8601 standard, which is widely used for representing date-time values
in a way that is unambiguous and timezone-independent.
}
\examples{
\dontrun{
# Parsing a full date-time string
s1ocn_parse_query_date("2024-09-03 14:23:45")
# Returns: "2024-09-03T14:23:45.000Z"

# Parsing a date-time string without seconds
s1ocn_parse_query_date("2024-09-03 14:23")
# Returns: "2024-09-03T14:23:00.000Z"

# Parsing a date-time string without minutes and seconds
s1ocn_parse_query_date("2024-09-03 14")
# Returns: "2024-09-03T14:00:00.000Z"

# Parsing a date string
s1ocn_parse_query_date("2024-09-03")
# Returns: "2024-09-03T00:00:00.000Z"

# Providing an invalid date string with a default value
s1ocn_parse_query_date("invalid-date",
default = lubridate::ymd_hms("2024-09-03 00:00:00", tz = "UTC"))
# Returns: "2024-09-03T00:00:00.000Z"

# Handling NA input by returning the default value
s1ocn_parse_query_date(NA,
default = lubridate::ymd_hms("2024-09-03 00:00:00", tz = "UTC"))
# Returns: "2024-09-03T00:00:00.000Z"
}

}
